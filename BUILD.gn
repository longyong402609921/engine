# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

group("flutter") {
  testonly = true

  public_deps = [
    "$flutter_root/lib/snapshot:compile_platform",
    "$flutter_root/lib/snapshot:generate_snapshot_bin",
    "$flutter_root/sky",
    "$flutter_root/third_party/txt",
  ]

  if (!is_fuchsia) {
    if (current_toolchain == host_toolchain) {
      public_deps += [
        "$flutter_root/frontend_server",
        "//third_party/dart:create_sdk",
      ]
    }
  }

  if (is_fuchsia) {
    public_deps += [
      "$flutter_root/content_handler:aot",
      "$flutter_root/content_handler:jit",
      "$flutter_root/examples",
      "$flutter_root/flow",
    ]
  }

  # If on the host, compile all unittests targets.
  if (current_toolchain == host_toolchain) {
    if (is_mac) {
      public_deps += [
        "$flutter_root/shell/platform/darwin:flutter_channels_unittests",
        "$flutter_root/shell/platform/embedder:flutter_embedder_framework",
      ]
    }
    if (!is_win) {
      public_deps += [
        "$flutter_root/shell/platform/embedder:embedder_unittests",
        "$flutter_root/shell/platform/embedder:flutter_engine",
      ]
    }
    public_deps += [
      "$flutter_root/flow:flow_unittests",
      "$flutter_root/fml:fml_unittests",
      "$flutter_root/sky/engine/wtf:wtf_unittests",
      "$flutter_root/synchronization:synchronization_unittests",
      "$flutter_root/third_party/txt:txt_unittests",
      "//garnet/public/lib/fxl:fxl_unittests",
    ]
  }
}

config("config") {
  include_dirs = [ ".." ]
}

if (is_fuchsia) {
  import("//build/package.gni")

  package("flutter_aot_runner") {
    deps = [
      "$flutter_root/content_handler:aot",
    ]

    binary = "flutter_aot_runner"

    meta = [ {
      path = rebase_path("content_handler/meta/sandbox")
      dest = "sandbox"
    } ]
  }

  package("flutter_jit_runner") {
    deps = [
      "$flutter_root/content_handler:jit",
    ]

    binary = "flutter_jit_runner"

    meta = [ {
      path = rebase_path("content_handler/meta/sandbox")
      dest = "sandbox"
    } ]
  }

} else {
  group("dist") {
    testonly = true

    deps = [
      "$flutter_root/sky/dist",
    ]
  }
}
